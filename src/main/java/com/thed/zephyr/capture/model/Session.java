package com.thed.zephyr.capture.model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.thed.zephyr.capture.service.db.converter.*;
import com.thed.zephyr.capture.util.ApplicationConstants;
import com.thed.zephyr.capture.util.json.DurationJsonDeserializer;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldType;
import org.springframework.data.elasticsearch.annotations.InnerField;
import org.springframework.data.elasticsearch.annotations.MultiField;

import java.io.Serializable;
import java.time.Duration;
import java.util.*;


/**
 * Created by aliakseimatsarski on 8/14/17.
 */
@Document(indexName = ApplicationConstants.ES_INDEX_NAME, type = "session")
@DynamoDBTable(tableName = ApplicationConstants.SESSION_TABLE_NAME)
public class Session  implements Comparable<Session>, Serializable{

    @Id
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    private String id;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = ApplicationConstants.GSI_CT_ID_PROJECT_ID)
    private String ctId;
    private String creator;
    private String assignee;
    @MultiField(mainField = @Field(type = FieldType.String), otherFields = @InnerField(type = FieldType.String, suffix = "lower_case_sort", indexAnalyzer = "case_insensitive_sort", searchAnalyzer = "case_insensitive_sort"))
    private String name;
    private String additionalInfo;
    @DynamoDBTypeConverted(converter = SessionStatusTypeConverter.class)
    private Status status;
    //@DynamoDBTypeConverted(converter = LongCollectionConverter.class)
    private Set<Long> relatedIssueIds;
    @DynamoDBIndexRangeKey(globalSecondaryIndexName = ApplicationConstants.GSI_CT_ID_PROJECT_ID)
    private Long projectId;
    @DynamoDBIgnore
    @MultiField(mainField = @Field(type = FieldType.String), otherFields = @InnerField(type = FieldType.String, suffix = "lower_case_sort", indexAnalyzer = "case_insensitive_sort", searchAnalyzer = "case_insensitive_sort"))
    private String projectName;
    @DynamoDBTypeConverted(converter = DateTypeConverter.class)
    private Date timeCreated;
    @DynamoDBTypeConverted(converter = DateTypeConverter.class)
    private Date timeFinished;
    @DynamoDBTypeConverted(converter = DurationTypeConverter.class)
    @JsonDeserialize(using = DurationJsonDeserializer.class)
    private Duration timeLogged;
    @DynamoDBTypeConverted(converter = IssueRaisedBeanConverter.class)
    private Collection<IssueRaisedBean> issuesRaised;
    @DynamoDBIgnore
    private Collection<SessionActivity> sessionActivity;
    private boolean shared;
    @DynamoDBTypeConverted(converter = ParticipantCollectionConverter.class)
    private Collection<Participant> participants;
    private String defaultTemplateId;
    @MultiField(mainField = @Field(type = FieldType.String), otherFields = @InnerField(type = FieldType.String, suffix = "lower_case_sort", indexAnalyzer = "case_insensitive_sort", searchAnalyzer = "case_insensitive_sort"))
    @DynamoDBIgnore
    private String userDisplayName;
    @DynamoDBIgnore
    private int statusOrder;

    public Session() {
    }

    public Session(String id, String ctId, String creator, String assignee, String name, String additionalInfo, Status status, Set<Long> relatedIssueIds, Long projectId, Date timeCreated, Date timeFinished, Duration timeLogged, Collection<IssueRaisedBean> issuesRaised, Collection<SessionActivity> sessionActivity, boolean shared, Collection<Participant> participants, String defaultTemplateId) {
        this.id = id;
        this.ctId = ctId;
        this.creator = creator;
        this.assignee = assignee;
        this.name = name;
        this.additionalInfo = additionalInfo;
        this.status = status;
        this.relatedIssueIds = relatedIssueIds;
        this.projectId = projectId;
        this.timeCreated = timeCreated;
        this.timeFinished = timeFinished;
        this.timeLogged = timeLogged;
        this.issuesRaised = issuesRaised;
        this.sessionActivity = sessionActivity;
        this.shared = shared;
        this.participants = participants;
        this.defaultTemplateId = defaultTemplateId;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCtId() {
        return ctId;
    }

    public void setCtId(String ctId) {
        this.ctId = ctId;
    }

    public String getCreator() {
        return creator;
    }

    public void setCreator(String creator) {
        this.creator = creator;
    }

    public String getAssignee() {
        return assignee;
    }

    public void setAssignee(String assignee) {
        this.assignee = assignee;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public Set<Long> getRelatedIssueIds() {
        return relatedIssueIds;
    }

    public void setRelatedIssueIds(Set<Long> relatedIssueIds) {
        this.relatedIssueIds = relatedIssueIds;
    }

    public Long getProjectId() {
        return projectId;
    }

    public void setProjectId(Long projectId) {
        this.projectId = projectId;
    }

    public Date getTimeCreated() {
        return timeCreated;
    }

    public void setTimeCreated(Date timeCreated) {
        this.timeCreated = timeCreated;
    }

    public Date getTimeFinished() {
        return timeFinished;
    }

    public void setTimeFinished(Date timeFinished) {
        this.timeFinished = timeFinished;
    }

    public Duration getTimeLogged() {
        return timeLogged;
    }

    public void setTimeLogged(Duration timeLogged) {
        this.timeLogged = timeLogged;
    }

    public Collection<IssueRaisedBean> getIssuesRaised() {
        return issuesRaised;
    }

    public void setIssuesRaised(Collection<IssueRaisedBean> issuesRaised) {
        this.issuesRaised = issuesRaised;
    }

    public Collection<SessionActivity> getSessionActivity() {
        return sessionActivity;
    }

    public void setSessionActivity(Collection<SessionActivity> sessionActivity) {
        this.sessionActivity = sessionActivity;
    }

    public void setShared(boolean shared) {
        this.shared = shared;
    }

    public void setParticipants(Collection<Participant> participants) {
        this.participants = participants;
    }

    public String getDefaultTemplateId() {
        return defaultTemplateId;
    }

    public void setDefaultTemplateId(String defaultTemplateId) {
        this.defaultTemplateId = defaultTemplateId;
    }

    public Collection<Participant> getParticipants() {
        return participants;
    }

    public boolean isShared() {
        return shared;
    }

    public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	public String getUserDisplayName() {
		return userDisplayName;
	}

	public void setUserDisplayName(String userDisplayName) {
		this.userDisplayName = userDisplayName;
	}

	public int getStatusOrder() {
		return statusOrder;
	}

	public void setStatusOrder(int statusOrder) {
		this.statusOrder = statusOrder;
	}

	/**
     * Get the Session Status History (timestamp to status mapping)
     *
     * @return Map time instant to new status
     */

    public enum Status {
        CREATED, STARTED, PAUSED, COMPLETED
    };

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Session session = (Session) o;

        if (additionalInfo != null ? !additionalInfo.equals(session.additionalInfo) : session.additionalInfo != null)
            return false;
        if (assignee != null ? !assignee.equals(session.assignee) : session.assignee != null) return false;
        if (creator != null ? !creator.equals(session.creator) : session.creator != null) return false;
        if (id != null ? !id.equals(session.id) : session.id != null) return false;
        if (participants != null ? !participants.equals(session.participants) : session.participants != null)
            return false;
        if (name != null ? !name.equals(session.name) : session.name != null) return false;
        if (sessionActivity != null ? !sessionActivity.equals(session.sessionActivity) : session.sessionActivity != null)
            return false;
        if (status != session.status) return false;
        if (timeCreated != null ? !timeCreated.equals(session.timeCreated) : session.timeCreated != null) return false;
        if (timeFinished != null ? !timeFinished.equals(session.timeFinished) : session.timeFinished != null)
            return false;
        if (timeLogged != null ? !timeLogged.equals(session.timeLogged) : session.timeLogged != null) return false;
        if (issuesRaised != null ? !issuesRaised.equals(session.issuesRaised) : session.issuesRaised != null) return false;
        return true;
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (creator != null ? creator.hashCode() : 0);
        result = 31 * result + (assignee != null ? assignee.hashCode() : 0);
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (additionalInfo != null ? additionalInfo.hashCode() : 0);
        result = 31 * result + (status != null ? status.hashCode() : 0);
        result = 31 * result + (timeCreated != null ? timeCreated.hashCode() : 0);
        result = 31 * result + (timeFinished != null ? timeFinished.hashCode() : 0);
        result = 31 * result + (timeLogged != null ? timeLogged.hashCode() : 0);
        result = 31 * result + (participants != null ? participants.hashCode() : 0);
        result = 31 * result + (sessionActivity != null ? sessionActivity.hashCode() : 0);
        result = 31 * result + (issuesRaised != null ? issuesRaised.hashCode() : 0);
        return result;
    }

    /**
     * Compare to another session.
     *
     * @param session Session to compare to
     * @return 0 if equal to session, otherwise based on id, name or owner in that order.
     */

    @Override
    public int compareTo(Session session) {
        if(session == null) return 1;
        // If equal, return zero
        if (this.id != null && this.id.compareTo(session.getId()) != 0) {
            return -this.id.compareTo(session.getId());
        } else if (this.timeCreated != null && this.timeCreated.compareTo(session.getTimeCreated()) != 0) {
            return this.timeCreated.compareTo(session.getTimeCreated());
        } else if (this.name != null && this.name.compareTo(session.getName()) != 0) {
            return this.name.compareTo(session.getName());
        } else if (this.creator != null && this.creator.compareTo(session.getCreator()) != 0) {
            return this.creator.compareTo(session.getCreator());
        } else if (this.status != null && this.status.compareTo(session.getStatus()) != 0) {
            return this.status.compareTo(session.getStatus());
        } else {
            // Need to consider the fact that all of our fields (except id) could be null, but theirs could be non-null
            return 0;
        }
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }
}
