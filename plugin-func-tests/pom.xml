<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.atlassian.bonfire</groupId>
        <artifactId>atlassian-bonfire</artifactId>
        <version>2.1000.0-SNAPSHOT</version>
    </parent>

    <artifactId>atlassian-bonfire-func-tests</artifactId>

    <name>JIRA Capture - Func Tests</name>
    <description>This is the Functional Tests for the Atlassian Bonfire plugin for JIRA.</description>

    <properties>
        <jira.functest.maxMemory>1512M</jira.functest.maxMemory>
        <jira.functest.minMemory>512M</jira.functest.minMemory>
        <jira.functest.maxPermSize>384M</jira.functest.maxPermSize>
        <xvfb.enable>true</xvfb.enable>
        <webdriver.browser>firefox</webdriver.browser>

        <ondemand.version>133-partial-1</ondemand.version>
        <webdriver.version>2.4.0</webdriver.version>

        <ondemand.data.version>115-SNAPSHOT</ondemand.data.version>
        <license.scope>test</license.scope>
        <datasource.jndi>jdbc/JiraDS</datasource.jndi>
        <postgres.port>15433</postgres.port>
        <postgres.dbname>jira</postgres.dbname>
        <postgres.user>jira</postgres.user>
        <postgres.password>jira</postgres.password>
        <postgres.docker.image>docker.atlassian.io/capture/jira-cloud</postgres.docker.image>
        <postgres.wait.condition>PostgreSQL init process complete; ready for start up.</postgres.wait.condition>
        <docker.plugin.version>0.15.9</docker.plugin.version>
        <database.driver.version.postgres>9.2-1004-jdbc4</database.driver.version.postgres>
        <vertigo.jvm.flags/>
    </properties>

    <build>
        <testResources>
            <testResource>
                <directory>src/test/xml</directory>
                <targetPath>xml</targetPath>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>
        <plugins>
            <!-- Build test JAR for AT/SLAT execution -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <configuration>
                            <forceCreation>true</forceCreation>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.16</version>
                <configuration>
                    <threadCount>1</threadCount>
                    <excludes>
                        <exclude>it/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.17</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>create-new-jira-home</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <mkdir dir="${project.build.directory}/jira_ondemand_home" />
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.14.2</version>
                <configuration>
                    <skip>${skipTests}</skip>
                    <images>
                        <image>
                            <alias>postgres-db</alias>
                            <name>${postgres.docker.image}</name>
                            <run>
                                <env>
                                    <POSTGRES_USER>${postgres.user}</POSTGRES_USER>
                                    <POSTGRES_PASSWORD>${postgres.password}</POSTGRES_PASSWORD>
                                    <POSTGRES_DB>${postgres.dbname}</POSTGRES_DB>
                                    <POSTGRES_INITDB_ARGS>--encoding=UTF8</POSTGRES_INITDB_ARGS>
                                </env>
                                <ports>
                                    <port>${postgres.port}:5432</port>
                                </ports>
                                <wait>
                                    <log>${postgres.wait.condition}</log>
                                    <time>150000</time>
                                    <kill>5000</kill>
                                    <shutdown>2000</shutdown>
                                </wait>
                                <log>
                                    <enabled>false</enabled>
                                    <prefix>postgres</prefix>
                                    <date>default</date>
                                    <color>cyan</color>
                                </log>
                            </run>
                        </image>
                    </images>
                    <verbose>true</verbose>
                </configuration>
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.atlassian.maven.plugins</groupId>
                <artifactId>maven-jira-plugin</artifactId>
                <version>${amps.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>run-integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <phase>integration-test</phase>
                    </execution>
                </executions>
                <configuration>
                    <enableFastdev>false</enableFastdev>
                    <extractDependencies>true</extractDependencies>
                    <skipManifestValidation>true</skipManifestValidation>
                    <installPlugin>false</installPlugin>
                    <systemPropertyVariables>
                        <xvfb.enable>${xvfb.enable}</xvfb.enable>
                    </systemPropertyVariables>

                    <!-- args passed to cargo -->
                    <jvmArgs>-server -Dmail.mime.decodeparameters=true
                        -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true
                        -Xmx${jira.functest.maxMemory} -Xms${jira.functest.minMemory}
                        -XX:MaxPermSize=${jira.functest.maxPermSize} -XX:+HeapDumpOnOutOfMemoryError
                        -Djira.plugins.bundled.disable=false -Djira.jelly.on=true -Dfile.encoding=utf-8
                        -Djira.dump=true -Djira.websudo.is.disabled=true -DPG_DB_HOST=localhost
                        -DPG_DB_PORT=${postgres.port} -DPG_DB_PASSWORD=${postgres.password}
                        -DPG_DB_NAME=${postgres.dbname} -DPG_DB_ROLE=${postgres.user} -DDOCKER
                        -Dstudio.webdav.directory=${project.build.directory} -Djira.environment=CI
                        -Datlassian.darkfeature.com.atlassian.jira.cloud.upgrade.task.framework.enabled=true
                        ${vertigo.jvm.flags}
                    </jvmArgs>

                    <pluginArtifacts>
                        <pluginArtifact>
                            <groupId>com.atlassian.bonfire</groupId>
                            <artifactId>atlassian-bonfire-plugin</artifactId>
                            <version>${project.version}</version>
                        </pluginArtifact>
                        <pluginArtifact>
                            <groupId>com.atlassian.jira</groupId>
                            <artifactId>jira-func-test-plugin</artifactId>
                            <version>${jira.version}</version>
                        </pluginArtifact>
                        <pluginArtifact>
                            <groupId>com.atlassian.jira.tests</groupId>
                            <artifactId>jira-testkit-plugin</artifactId>
                            <version>${testkit.version}</version>
                        </pluginArtifact>
                        <pluginArtifact>
                            <groupId>com.atlassian.upm</groupId>
                            <artifactId>atlassian-universal-plugin-manager-javascript-tests</artifactId>
                            <version>${upm.version}</version>
                        </pluginArtifact>
                    </pluginArtifacts>

                    <products>
                        <product>
                            <id>jira</id>
                            <instanceId>jira-test</instanceId>
                            <version>${jira.version}</version>
                            <dataVersion>${jira.data.version}</dataVersion>
                            <dataSources>
                                <dataSource>
                                    <jndi>${datasource.jndi}</jndi>
                                    <url>jdbc:postgresql://localhost:${postgres.port}/jira</url>
                                    <driver>org.postgresql.Driver</driver>
                                    <username>${postgres.user}</username>
                                    <password>${postgres.password}</password>
                                    <schema>public</schema>
                                    <defaultDatabase>jdbc:postgresql://localhost:${postgres.port}/postgres
                                    </defaultDatabase>
                                    <systemUsername>postgres</systemUsername>
                                    <systemPassword>postgres</systemPassword>
                                    <importMethod>Sql</importMethod>
                                    <type>postgres84</type>
                                </dataSource>
                            </dataSources>
                        </product>
                    </products>
                    <libArtifacts>
                        <libArtifact>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${database.driver.version.postgres}</version>
                        </libArtifact>
                    </libArtifacts>
                    <testGroups>
                        <!--rest tests-->
                        <testGroup>
                            <id>bonfire-jira-rest</id>
                            <productIds>
                                <productId>jira-test</productId>
                            </productIds>
                            <includes>
                                <include>it/com/atlassian/bonfire/rest/**</include>
                            </includes>
                            <excludes>
                                <exclude>**/TestLicenseExpiration.java</exclude>
                            </excludes>
                        </testGroup>

                        <!--integration tests-->
                        <testGroup>
                            <id>bonfire-jira-integration</id>
                            <productIds>
                                <productId>jira</productId>
                            </productIds>
                            <includes>
                                <include>it/com/atlassian/bonfire/webdriver/**</include>
                            </includes>
                            <excludes>
                                <exclude>it/com/atlassian/bonfire/webdriver/admin/**</exclude>
                            </excludes>
                        </testGroup>
                    </testGroups>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.atlassian.maven.plugins</groupId>
                <artifactId>maven-amps-plugin</artifactId>
                <version>${amps.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>ondemand-webdriver-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <phase>integration-test</phase>
                    </execution>
                </executions>
                <configuration>
                    <enableFastdev>false</enableFastdev>

                    <!--<productDataPath>${project.build.directory}/jira_ondemand_home</productDataPath>-->
                    <systemPropertyVariables>
                        <!-- we run on XVFB, since that's the way the build engineers would
             like to go, as opposed to VNC server (according to Min'an) -->
                        <xvfb.enable>${xvfb.enable}</xvfb.enable>

                        <!-- By default, we don't like to deal with websudo, it's just an annoyance -->
                        <jira.websudo.is.disabled>true</jira.websudo.is.disabled>

                        <webdriver.browser>${webdriver.browser}</webdriver.browser>
                        <jira.qunit.testoutput.location>${project.build.directory}/group-webdriver_tests/tomcat6x/surefire-reports</jira.qunit.testoutput.location>
                    </systemPropertyVariables>

                    <jvmArgs>-Xmx512m -XX:MaxPermSize=256m</jvmArgs>
                    <skipManifestValidation>true</skipManifestValidation>

                    <!-- tell AMPS to install the correct GH version before running the tests -->
                    <libArtifacts>
                        <libArtifact>
                            <groupId>com.atlassian.activeobjects</groupId>
                            <artifactId>activeobjects-spi</artifactId>
                            <version>${ao.version}</version>
                        </libArtifact>
                    </libArtifacts>
                    <bundledArtifacts>
                        <bundledArtifact>
                            <groupId>com.atlassian.activeobjects</groupId>
                            <artifactId>activeobjects-jira-spi</artifactId>
                            <version>${ao.version}</version>
                        </bundledArtifact>

                        <bundledArtifact>
                            <groupId>com.atlassian.activeobjects</groupId>
                            <artifactId>activeobjects-plugin</artifactId>
                            <version>${ao.version}</version>
                        </bundledArtifact>

                        <bundledArtifact>
                            <groupId>com.atlassian.jira</groupId>
                            <artifactId>jira-func-test-plugin</artifactId>
                            <version>${jira.version}</version>
                        </bundledArtifact>

                        <bundledArtifact>
                            <groupId>com.atlassian.jira.tests</groupId>
                            <artifactId>jira-testkit-plugin</artifactId>
                            <version>${testkit.version}</version>
                        </bundledArtifact>

                        <bundledArtifact>
                            <groupId>com.atlassian.upm</groupId>
                            <artifactId>atlassian-universal-plugin-manager-javascript-tests</artifactId>
                            <version>${upm.version}</version>
                        </bundledArtifact>
                    </bundledArtifacts>

                    <testGroups>
                        <testGroup>
                            <id>bonfire-ondemand-integration</id>
                            <productIds>
                                <productId>studio</productId>
                            </productIds>
                            <includes>
                                <include>it/com/atlassian/bonfire/ondemand/**</include>
                            </includes>
                        </testGroup>
                    </testGroups>

                    <!--TODO: drop the studio entry-->
                    <!-- Run configuration for OnDemand -->
                    <!-- So that the plugin will only be installed in JIRA -->
                    <installPlugin>false</installPlugin>
                    <instanceId>studio</instanceId>

                    <products>
                        <product>
                            <id>studio</id>
                            <version>${ondemand.version}</version>
                            <dataVersion>${ondemand.data.version}</dataVersion>
                            <instanceIds>
                                <id>studio-crowd</id>
                                <id>studio-jira</id>
                                <id>studio-confluence</id>
                                <id>studio-bamboo</id>
                                <id>studio-fisheye</id>
                            </instanceIds>
                        </product>

                        <product>
                            <id>studio-jira</id>
                            <groupId>com.atlassian.jira</groupId>
                            <artifactId>jira-ondemand-webapp</artifactId>
                            <version>${jira.version}</version>
                            <installPlugin>true</installPlugin>
                        </product>
                    </products>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>

        <!-- test deps -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.4</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.6.4</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.6.4</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira</groupId>
            <artifactId>jira-func-tests</artifactId>
            <version>${jira.func.test.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.google.collections</groupId>
                    <artifactId>google-collections</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.code.findbugs</groupId>
                    <artifactId>jsr305</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira</groupId>
            <artifactId>atlassian-jira-pageobjects</artifactId>
            <version>${jira.pageobjects.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.atlassian.bundles</groupId>
                    <artifactId>jsr305</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira.plugins</groupId>
            <artifactId>jira-plugin-test-resources</artifactId>
            <version>${jira.version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.bonfire</groupId>
            <artifactId>atlassian-bonfire-plugin</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira</groupId>
            <artifactId>jira-api</artifactId>
            <version>${jira.func.test.version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira</groupId>
            <artifactId>jira-core</artifactId>
            <version>${jira.func.test.version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian.sal</groupId>
            <artifactId>sal-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.atlassian.applinks</groupId>
            <artifactId>applinks-core</artifactId>
            <version>2.5.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!--This is for their JSR annotations-->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>1.3.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.0.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.atlassian.upm</groupId>
            <artifactId>atlassian-universal-plugin-manager-pageobjects</artifactId>
            <version>${upm.version}</version>
        </dependency>
        <dependency>
            <groupId>com.atlassian</groupId>
            <artifactId>atlassian-test-categories</artifactId>
            <version>0.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira.tests</groupId>
            <artifactId>jira-testkit-client</artifactId>
            <version>${testkit.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xercesImpl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>cloud.atlassian.ninjas</groupId>
            <artifactId>tenant-leak-detector-aspect</artifactId>
            <version>${tenant-leak-detector.version}</version>
        </dependency>

        <!-- Overriding plug-in dependencies to get FireFox version 31 that's working on Linux -->
        <dependency>
            <groupId>com.atlassian.browsers</groupId>
            <artifactId>atlassian-browsers-auto</artifactId>
            <version>2.6-m4</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.atlassian.selenium</groupId>
            <artifactId>atlassian-webdriver-core</artifactId>
            <version>${webdriver.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.atlassian.bundles</groupId>
                    <artifactId>jsr305</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-api</artifactId>
            <version>2.51.0</version>
        </dependency>

        <dependency>
            <groupId>com.atlassian.selenium</groupId>
            <artifactId>atlassian-selenium</artifactId>
            <version>${webdriver.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- ==================================================================================================================== -->
        <!-- ==================================================================================================================== -->
        <!-- Manually including dependencies to fix ClassNotFound / MethodNotFound exception as Maven hasn't resolved them for me -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.3.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.4.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.5</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.5</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.atlassian.jira</groupId>
            <artifactId>jira-func-tests-legacy</artifactId>
            <version>${jira.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>cloud.atlassian.rdbms.schema</groupId>
            <artifactId>atlassian-rdbms-schema-test-util</artifactId>
            <version>1.3.1</version>
            <scope>test</scope>
        </dependency>
        <!-- ==================================================================================================================== -->
    </dependencies>

    <profiles>
        <profile>
            <!-- release profile to help the funct test being released with milestones -->
            <id>release-profile</id>
            <properties>
                <enforcer.skip>true</enforcer.skip>
            </properties>
        </profile>
        <profile>
            <id>jira-vertigo-profile</id>
            <activation>
                <property>
                    <name>vertigo.mode</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <jira.capture.test.tenant>jsw_capture</jira.capture.test.tenant>
                <jira.capture.vertigo.flags>-Djira.dev.mode.tenantId=${jira.capture.test.tenant}</jira.capture.vertigo.flags>
                <vertigo.jvm.flags>
                    ${jira.capture.vertigo.flags}
                    -Dvertigo.mode=true
                    -Dscheduler.noop=true
                    -Djira.dev.mode=true
                    -Dtenant.dir=${project.basedir}/src/test/resources/tenants
                    -Djira.vertigo.provisioning.enabled=true
                    -Datlassian.darkfeature.unified.usermanagement=true
                    -Datlassian.darkfeature.connect.no-applinks=true
                    -Datlassian.mail.fetchdisabled=true
                    -Datlassian.darkfeature.com.atlassian.jira.database.based.session.bulkedit=true
                    -Datlassian.plugins.enable.wait=300
                    -Datlassian.darkfeature.unified.usermanagement=true
                    -Datlassian.darkfeature.atlassian.plugin.aci.enabled=true
                    -Datlassian.darkfeature.com.atlassian.jira.config.BIG_PIPE=true
                    -Datlassian.darkfeature.com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED=true
                    -Datlassian.darkfeature.com.atlassian.jira.config.CoreFeatures.ON_DEMAND=true
                    -Datlassian.darkfeature.com.atlassian.jira.config.CoreFeatures.PERMISSIONS_MANAGED_BY_UM=true
                    -Datlassian.darkfeature.com.atlassian.jira.config.WEB_PANEL_METRICS=true
                    -Datlassian.darkfeature.com.atlassian.jira.plugins.one-click-invite-enabled=true
                    -Datlassian.darkfeature.com.atlassian.jira.projects.issue.summary.vignettes=true
                    -Datlassian.darkfeature.com.atlassian.plugins.issuenav.SEND_HEAD_EARLY=true
                    -Datlassian.darkfeature.jira.export.csv.disabled=true
                    -Datlassian.darkfeature.jira.onboarding.cyoa=true
                    -Datlassian.darkfeature.jira.issue.search.api.indexonly.disabled=true
                    -Datlassian.darkfeature.jira.issue.search.api.databaseonly.enabled=true
                    -Datlassian.darkfeature.com.atlassian.rm.portfolio.vertigo.Provisioning=true
                    -Datlassian.darkfeature.com.atlassian.rm.portfolio.vertigo.Upgrading=true
                    -Datlassian.darkfeature.com.atlassian.rm.portfolio.vertigo.AMQ=true
                    -Datlassian.darkfeature.com.atlassian.rm.portfolio.vertigo.issueloading.Database=true
                    -Datlassian.darkfeature.com.atlassian.rm.portfolio.vertigo.Licensing=true
                    -Datlassian.darkfeature.com.atlassian.portfolio.menu.MainMenuEntry=true
                    -Datlassian.darkfeature.jira.avatar.vertigo.SYNCHRONOUS_UPLOAD=true
                    -Datlassian.darkfeature.jira.avatar.vertigo.READ_REMOTE=true
                    -Datlassian.darkfeature.jira.avatar.vertigo.NO_LOCAL_FILES=true
                    -Datlassian.darkfeature.jira.attachment.vertigo.DIRECT_MEDIA_API_LINKING=true
                    -Datlassian.darkfeature.jira.attachment.vertigo.MEDIA_API_READ=true
                    -Datlassian.darkfeature.jira.attachment.vertigo.SYNCHRONOUS_UPLOAD=true
                    -Datlassian.darkfeature.jira.attachment.vertigo.NO_BACKUP=true
                    -Daws.accessKeyId=fake
                    -Daws.secretKey=fake
                    -Dtestkit.backdoor.skip.dataimport=true
                </vertigo.jvm.flags>
            </properties>
        </profile>
        <profile>
            <id>freezer-release-profile</id>
            <properties>
                <!-- Force maven JIRA plug-in to run only func-tests as webdriver tests are launched already by maven-amps-plugin -->
                <testGroups>bonfire-jira-rest,bonfire-jira-integration</testGroups>
                <!-- Skip the enforcer rules -->
                <enforcer.skip>true</enforcer.skip>
                <jira.data.version>${jira.version}</jira.data.version>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.atlassian.jira.tests</groupId>
                    <artifactId>jira-testkit-client</artifactId>
                    <version>${testkit.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.atlassian.jira.tests</groupId>
                    <artifactId>jira-testkit-plugin</artifactId>
                    <version>${testkit.version}</version>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>waffle</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>aspectj-maven-plugin</artifactId>
                        <version>1.9</version>
                        <configuration>
                            <aspectLibraries>
                                <aspectLibrary>
                                    <groupId>cloud.atlassian.ninjas</groupId>
                                    <artifactId>tenant-leak-detector-aspect</artifactId>
                                </aspectLibrary>
                            </aspectLibraries>
                            <complianceLevel>1.8</complianceLevel>
                            <verbose>true</verbose>
                            <showWeaveInfo>true</showWeaveInfo>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.aspectj</groupId>
                                <artifactId>aspectjrt</artifactId>
                                <version>${aspectj.version}</version>
                                <scope>compile</scope>
                            </dependency>
                            <dependency>
                                <groupId>org.aspectj</groupId>
                                <artifactId>aspectjtools</artifactId>
                                <version>${aspectj.version}</version>
                                <scope>compile</scope>
                            </dependency>
                            <dependency>
                                <groupId>org.aspectj</groupId>
                                <artifactId>aspectjweaver</artifactId>
                                <version>${aspectj.version}</version>
                                <scope>compile</scope>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
