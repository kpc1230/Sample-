<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.atlassian.pom</groupId>
        <artifactId>cloud-pom</artifactId>
        <version>4.0.26</version>
    </parent>

    <groupId>com.atlassian.bonfire</groupId>
    <artifactId>atlassian-bonfire</artifactId>
    <!--
    When releasing a new version of Bonfire, don't forget to update the version related properties as well
    -->
    <version>2.1000.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>JIRA Capture Parent</name>
    <description>JIRA Capture allows for Agile Testing.</description>

    <modules>
        <module>plugin</module>
        <module>plugin-func-tests</module>
        <module>jira-capture-od-acceptance-tests</module>
        <module>capture-findbugs</module>
    </modules>

    <scm>
        <connection>scm:git:ssh://git@stash.atlassian.com:7997/jiracloud/jira-capture.git</connection>
        <developerConnection>scm:git:ssh://git@stash.atlassian.com:7997/jiracloud/jira-capture.git</developerConnection>
        <url>https://stash.atlassian.com/projects/JIRACLOUD/repos/jira-capture</url>
      <tag>HEAD</tag>
  </scm>

    <issueManagement>
        <system>JIRA</system>
        <url>https://jira.atlassian.com/browse/BON</url>
    </issueManagement>

    <ciManagement>
        <system>Bamboo</system>
        <url>https://jira-cloud-bamboo.internal.atlassian.com/browse/JCAP</url>
    </ciManagement>

    <properties>
        <!-- specify in Bamboo build-->
        <ci.dev.channel />

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
        <browser.extensions.version>2.9</browser.extensions.version>

        <!-- master version -->
        <jiraMaster.version>${jira.version}</jiraMaster.version>

        <!-- compile against versions -->
        <jira.version>1000.1126.0</jira.version>

        <jira.data.version>${jira.version}</jira.data.version>

        <jira.compile.version>${jira.version}</jira.compile.version>
        <jira.data.version>${jira.version}</jira.data.version>
        <jira.pageobjects.version>${jira.version}</jira.pageobjects.version>
        <jira.rest.version>3.0.2</jira.rest.version>

        <ao.version>0.19.7</ao.version>

        <amps.version>5.1.2</amps.version>
        <sal.version>2.10.23</sal.version>

        <analytics.version>2.28</analytics.version>
        <testkit.version>${jira.version}</testkit.version>

        <jira.func.test.version>${jira.version}</jira.func.test.version>
        <junit.version>4.12</junit.version>

        <upm.version>2.17.13</upm.version>

        <guava.version>18.0</guava.version>

        <atlassian.keystore.version>1.7</atlassian.keystore.version>
        <plugin.webresources.version>3.1.5</plugin.webresources.version>

        <tenant.provisioning.version>1.1.0</tenant.provisioning.version>

        <aspectj.version>1.8.9</aspectj.version>
        <tenant-leak-detector.version>1.0.2</tenant-leak-detector.version>

        <pocketknife.version>1.0.0</pocketknife.version>
        <pocketknife.dynamic-modules.version>0.71.0</pocketknife.dynamic-modules.version>

        <!-- ####################################################################################### -->
        <!--
                NOTE: JIRA Capture can be build with Debug profile, which has some neat features:
                * loading changes in HTML / JavaScript from external (or shared) folder (see EchoProtocol.cs for #if blocks)

                In order to assembly such debug build, override the capture.build.config property (i.e. -Dcapture.build.config=Debug)
                Available options: Release, Debug, ShellDebug, RegistryDebug
        -->
        <!-- ####################################################################################### -->
        <capture.build.config>Release</capture.build.config>

        <javax.validation.version>1.1.0.Final</javax.validation.version>
        <maven.javadoc.version>2.8.1-atlassian-2</maven.javadoc.version>
        <maven.compiler.plugin.version>3.1</maven.compiler.plugin.version>
        <jdkLevel>1.8</jdkLevel>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>cloud.atlassian.pocketknife</groupId>
                <artifactId>jira-pocketknife-enablement</artifactId>
                <version>${pocketknife.version}</version>
            </dependency>
            <dependency>
                <groupId>cloud.atlassian.pocketknife</groupId>
                <artifactId>jira-pocketknife-rest</artifactId>
                <version>${pocketknife.version}</version>
            </dependency>
            <dependency>
                <groupId>cloud.atlassian.pocketknife</groupId>
                <artifactId>jira-pocketknife-vertigo-annotations</artifactId>
                <version>${pocketknife.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>findbugs</artifactId>
                <version>3.0.1</version>
            </dependency>

            <dependency>
                <groupId>com.atlassian.analytics</groupId>
                <artifactId>analytics-api</artifactId>
                <version>${analytics.version}</version>
                <scope>provided</scope> <!-- https://jira.atlassian.com/browse/AA-68  -->
            </dependency>
            <dependency>
                <groupId>com.atlassian.jira</groupId>
                <artifactId>jira-api</artifactId>
                <version>${jira.compile.version}</version> <!-- Compile against JIRA 6.0, the minimum supported JIRA version -->
                <scope>provided</scope>
                <exclusions>
                    <exclusion>
                        <groupId>com.google.code.findbugs</groupId>
                        <artifactId>jsr305</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.atlassian.jira</groupId>
                <artifactId>jira-core</artifactId>
                <version>${jira.compile.version}</version> <!-- Compile against JIRA 6.0, the minimum supported JIRA version -->
                <scope>provided</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjweaver</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>cloud.atlassian.ninjas</groupId>
                        <artifactId>tenant-leak-detector-aspect</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.atlassian.jira</groupId>
                <artifactId>jira-rest-plugin</artifactId>
                <version>${jira.compile.version}</version> <!-- Compile against JIRA 6.0, the minimum supported JIRA version -->
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.atlassian.plugins.rest</groupId>
                <artifactId>com.atlassian.jersey-library</artifactId>
                <version>${jira.rest.version}</version>
                <scope>provided</scope>
            </dependency>
            <!-- Added for javadoc generation having an error because it couldn't find the class file -->
            <dependency>
                <groupId>com.atlassian.plugins</groupId>
                <artifactId>atlassian-plugins-webresource</artifactId>
                <version>${plugin.webresources.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.atlassian.jira</groupId>
                <artifactId>jira-func-tests</artifactId>
                <version>${jira.version}</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>com.google.collections</groupId>
                        <artifactId>google-collections</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>com.google.code.findbugs</groupId>
                        <artifactId>jsr305</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.atlassian.jira</groupId>
                <artifactId>jira-tests</artifactId>
                <version>${jira.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.atlassian.sal</groupId>
                <artifactId>sal-core</artifactId>
                <version>${sal.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.atlassian.sal</groupId>
                <artifactId>sal-api</artifactId>
                <version>${sal.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>cloud.atlassian.provisioning</groupId>
                <artifactId>tenant-provisioning-api</artifactId>
                <version>${tenant.provisioning.version}</version>
            </dependency>
            <dependency>
                <!-- Old JIRA Dependencies are requiring 1.1.3.4-RC8 which breaks enforcer rules. Overriding here -->
                <groupId>xpp3</groupId>
                <artifactId>xpp3</artifactId>
                <version>1.1.4c</version>
            </dependency>
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>${javax.validation.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!--
                This plugin will generate the versionMajor / versionMinor build numbers based on the current project.version.

                This allows us to turn 1.2.3-SNAPSHOT into a real number like 1.2.3.{build.number}
                -->
                <plugin>
                    <groupId>org.codehaus.groovy.maven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <executions>
                        <execution>
                            <phase>validate</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    /**
                                     * This is the main maven groovy script that is invoked to setup variables and the link to make other scripts easier to write
                                     */

                                    def isBlank(String s) {
                                        return s == null || s.trim().length() == 0;
                                    }


                                    def mvnVersion = project.version;
                                    def snapShotIndex = project.version.indexOf('-SNAPSHOT');
                                    if (snapShotIndex != -1)
                                    {
                                        mvnVersion = mvnVersion.substring(0, snapShotIndex);
                                    }
                                    def versions = mvnVersion.split('\\.');
                                    def versionMajor = versions[0];
                                    def versionMinor = versions[1];
                                    def versionBugFix = '';
                                    def versionBuild = '';

                                    if (versions.length &gt; 2)
                                    {
                                        versionBugFix = versions[2];
                                    }

                                    def ciBuilderNumber = System.getProperty('ci.build.number');
                                    if (ciBuilderNumber != null)
                                    {
                                        versionBuild = ciBuilderNumber;
                                    }
                                    else if (snapShotIndex &gt; 0)
                                    {
                                        versionBuild = "9999";
                                    } else {
                                        // If version has 4 digits, like 2.7.2.2 - use last version number
                                        if (versions.length &gt; 3)
                                        {
                                            versionBuild = versions[3];
                                        }
                                        else
                                        {
                                            versionBuild = "0";
                                        }

                                    }

                                    project.properties.setProperty('versionMajor', versionMajor);
                                    project.properties.setProperty('versionMinor', versionMinor);
                                    project.properties.setProperty('versionBugFix', versionBugFix);
                                    project.properties.setProperty('versionBuild', versionBuild);

                                    // gets replaced a lot in files via @@build.version @@
                                    def buildVersion = versionMajor + "." + versionMinor;
                                    if (versionBugFix)
                                    {
                                        buildVersion += "." + versionBugFix;
                                    }
                                    if (versionBuild)
                                    {
                                        buildVersion += "." + versionBuild;
                                    }
                                    project.properties.setProperty('build.version', buildVersion);
                                    project.properties.setProperty('extension.version.directory', "${browser.extensions.version}");

                                    /*
                                    If we have a pfx certificate password passed in then all good, otherwise you need to have
                                    defined it in your local environment so we can know how to sign
                                    */


                                    def ciPfxPassword = project.properties.getProperty('ci.pfx.password');

                                    log.info("ciPfxPassword=${ciPfxPassword}")
                                    if (isBlank(ciPfxPassword))
                                    {
                                        ciPfxPassword = System.getProperty('ci.pfx.password');
                                        if (isBlank(ciPfxPassword))
                                        {
                                            ciPfxPassword = System.getenv('CI_PFX_PASSWORD');
                                            if (isBlank(ciPfxPassword))
                                            {
                                                //fail('You must have CI_PFX_PASSWORD set or specified is via -Dci.pfx.password to build Bonfire');
                                                ciPfxPassword = "";
                                            }
                                        }
                                        project.properties.setProperty('ci.pfx.password', ciPfxPassword);
                                    }




                                    log.info("Maven properties in play");
                                    log.info("------------------------");
                                    def mvnProperties = new TreeMap(project.properties);
                                    mvnProperties.put('project.version', project.version);
                                    for (x in mvnProperties)
                                    {
                                        def val = mvnProperties.get(x.key);
                                        if (x.key.contains("password"))
                                        {
                                            val = "xxxxx";
                                        }
                                        log.info("\t${x.key} : ${val}");
                                    }
                                    log.info("------------------------");
                                </source>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>com.atlassian.maven.plugins</groupId>
                    <artifactId>maven-jira-plugin</artifactId>
                    <version>${amps.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <productVersion>${jira.version}</productVersion>
                        <productDataVersion>${jira.data.version}</productDataVersion>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <version>1.0</version>
                    <executions>
                        <execution>
                            <phase>validate</phase>
                            <goals>
                                <goal>create</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <revisionOnScmFailure>unknown</revisionOnScmFailure>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                    <dependencies>
                        <dependency>
                            <groupId>ant-contrib</groupId>
                            <artifactId>ant-contrib</artifactId>
                            <version>20020829</version>
                        </dependency>
                    </dependencies>
                </plugin>
				<plugin>
                    <groupId>com.atlassian.maven.plugins</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>0.26</version>
                    <configuration>
                        <licensesDirectory>${user.dir}/third-party-licensing/licenses</licensesDirectory>
                        <bomFile>${user.dir}/third-party-licensing/bom.csv</bomFile>
                        <nonMavenDependenciesFile>${user.dir}/third-party-licensing/missing-non-maven-dependencies.properties</nonMavenDependenciesFile>
                        <ignoredArtifactsTrees>com.atlassian.jira:atlassian-jira-pageobjects,com.atlassian.jira.plugins:jira-plugin-test-resources,com.atlassian.jira:jira-func-tests</ignoredArtifactsTrees>
                        <ignoredMavenScopes>test,provided</ignoredMavenScopes>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.atlassian.maven.plugins</groupId>
                    <artifactId>maven-amps-dispatcher-plugin</artifactId>
                    <version>${amps.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven.javadoc.version}</version>
                    <configuration>
                        <maxmemory>2048m</maxmemory>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.0-rc-5</version>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>vertigo-findbugs</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <version>3.0.4</version>
                        <configuration>
                            <plugins>
                                <plugin>
                                    <groupId>com.atlassian.jira.plugins</groupId>
                                    <artifactId>jira-capture-findbugs</artifactId>
                                    <version>${project.version}</version>
                                </plugin>
                            </plugins>
                            <visitors>UnsafeSingletonFieldDetector</visitors>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
